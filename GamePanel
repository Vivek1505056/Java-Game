package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

import entity.Boss;
import entity.Player;
import tile.TileManager;

public class GamePanel extends JPanel implements Runnable{
	
	// screen settings
	static final int originalTileSize = 16;
	static final int scale = 3;
	
	public final int tileSize = originalTileSize * scale;
	public final int maxScreenCol = 24;
	public final int maxScreenRow = 20;
	public final int screenWidth = tileSize * maxScreenCol;
	public final int screenHeight = tileSize * maxScreenRow;
	
	public static BufferedImage fireImg;
	static {
		try {
			fireImg = ImageIO.read(new File("././res/fire.png"));
			
		}catch(IOException e) {
			System.out.print("can't load fire");
		}
	}
	
	TileManager tileM = new TileManager(this);
	KeyHandler keyH = new KeyHandler();
	Thread gameThread;
	Player player = new Player(this,keyH);
	Boss boss = new Boss(this);
	Random randNum = new Random();
   			
	int playerX = 100;
	int playerY = 100;
	int playerSpeed = 10;
	
	int FPS = 60;
	
	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    double maxWidth = screenSize.getWidth();
    double maxHeight = screenSize.getHeight();
    
    int rand;
	int originalFireY = (int) (maxHeight-760);
    int fireY = (int) (maxHeight - 760);
    int fireX = rand;
    int fireX2 = rand;
    int fireX3 = rand;
    int fireX4 = rand;
    int fireX5 = rand;
    int fireX6 = rand;
    int fireSpeed = 10;
    int fireHeight = 90;
    int fireWidth = 50;
    boolean gameOver;
    int counter;
    
	
	public GamePanel()
	{
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
	}

	
	public void startGameThread()
	{
		gameThread = new Thread(this);
		gameThread.start();
	}
	
	public void run() 
	{
		
		double drawInterval = 1000000000/FPS;
		double nextDrawTime = System.nanoTime() + drawInterval;
		
		while(gameThread != null)
		{			
			
			// 1 UPDATE
			update();
			
			// 2 DRAW
			repaint();
			
			
			try {
				
				double remainingTime = nextDrawTime - System.nanoTime();
				remainingTime = remainingTime/1000000;
				
				if(remainingTime < 0)
				{
					remainingTime = 0;
				}
				
				Thread.sleep((long) remainingTime);
				
				nextDrawTime += drawInterval;
				
			} 
			catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void update()
	{
		player.update();
		boss.update();
		
		playerX = player.getXVal();
		playerY = player.getYVal();
		if(fireX < 0 || fireY > maxHeight) {
            fireY = originalFireY;
            rand = randNum.nextInt((int) (screenWidth));
            fireX = rand;
            rand = randNum.nextInt((int) (screenWidth));
            fireX2 = rand;
            rand = randNum.nextInt((int) (screenWidth));
            fireX3 = rand;
            rand = randNum.nextInt((int) (screenWidth));
            fireX4 = rand;
            rand = randNum.nextInt((int) (screenWidth));
            fireX5 = rand;
            rand = randNum.nextInt((int) (screenWidth));
            fireX6 = rand;
        }
		
		if(((playerX > fireX) && (playerX < fireX + fireWidth)) && ((playerY > fireY) && (playerY < fireY+fireHeight))){
            gameOver = true;
        }
		if(((playerX > fireX2) && (playerX < fireX2 + fireWidth)) && ((playerY > fireY) && (playerY < fireY+fireHeight))){
            gameOver = true;
        }
		if(((playerX > fireX3) && (playerX < fireX3 + fireWidth)) && ((playerY > fireY) && (playerY < fireY+fireHeight))){
            gameOver = true;
        }
		
		if(((playerX > fireX4) && (playerX < fireX4 + fireWidth)) && ((playerY > fireY) && (playerY < fireY+fireHeight))){
            gameOver = true;
        }
		if(((playerX > fireX5) && (playerX < fireX5 + fireWidth)) && ((playerY > fireY) && (playerY < fireY+fireHeight))){
            gameOver = true;
        }
		if(((playerX > fireX6) && (playerX < fireX6 + fireWidth)) && ((playerY > fireY) && (playerY < fireY+fireHeight))){
            gameOver = true;
        }
		fireY += fireSpeed;
		
		if(gameOver == true)
		{
			fireSpeed = 20;
		}
		

	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D)g;
		
		tileM.draw(g2);
		player.draw(g2);
		boss.draw(g2);
		
		g2.setColor(Color.white);
		
		g2.drawImage(fireImg, fireX, fireY, fireWidth, fireHeight,null);
		g2.drawImage(fireImg, fireX2, fireY, fireWidth, fireHeight,null);
		g2.drawImage(fireImg, fireX3, fireY, fireWidth, fireHeight,null);
		g2.drawImage(fireImg, fireX4, fireY, fireWidth, fireHeight,null);
		g2.drawImage(fireImg, fireX5, fireY, fireWidth, fireHeight,null);
		g2.drawImage(fireImg, fireX6, fireY, fireWidth, fireHeight,null);

		g2.dispose();
		
	}
	
	
}
